<div class="nearby-sec">
   <div class="container">
      <div class="col">
         <h3 class="sec-title">Emplacements à proximité</h3>
      </div>
      {{!-- location-data --}}
      <div class="nearby-location location-data">
      </div>
   </div>
</div>
{{!-- 
<div class="inline-block w-full align-middle bg-[#0C0C0C] pt-10 pb-10 lg:pb-20">
   <div class="container">
      <div class="max-w-[800px] mx-auto text-white text-center mb-10">
         <h2 class="text-xl md:text-3xl font-semibold leading-tight mb-3 text-white uppercase Nearbylocation" id="Nearby">
         </h2>
         {{convertRTFToHTML c_abbotttext}}
      </div>
      <div class="location-data w-full grid grid-cols-1 lg:grid-cols-2 gap-5 lg:gap-9"> </div>
   </div>
</div>
--}}
<script>
   function convertDays(days) {
     const currentDate = new Date();
     const dayNumber = currentDate.getDay();
     const currentSelectedDay = days[dayNumber];
     const beforeSelected = days.slice(0, dayNumber);
     const afterSelected = days.slice(dayNumber, days.length);
     beforeSelected.forEach((element) => {
       afterSelected.push(element);
     });
     return {
       afterSelected: afterSelected
     };
   }
   let Nearbylocation = 'Nearby Location';
   let path = window.location.href;
   let days_string = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
   
   if (path.includes("/fr")) {
     days_string = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'];
     Nearbylocation = "À proximité de l'emplacement"
   }
   
   if (path.includes("/ja")) {
     days_string = ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'];
     Nearbylocation = "近くの場所"
   
   }
       
   $('.time-row').each(function () {
   
     var day = $(this).attr('data-day');
     var timeStart = $(this).attr('data-start');
     var timeEnd = $(this).attr('data-end');
   
     var today = new Date();
     var dayName = days_string[today.getDay()];
   
   
     // $(this).find('.time_start').html(formatTimE(timeStart));
     // $(this).find('.time_end').html(formatTimE(timeEnd));
   
     if (day) {
       if (dayName == day) {
         $(this).addClass('currentDay');
         $(this).clone().prependTo(".hours-list");
         $(this).remove();
       }
     } else {
   
       if (dayName == day) {
         $(this).addClass('currentDay');
         $(this).clone().prependTo(".hours-list");
         $(this).remove();
       }
   
     }
   
   });
   
   const convertedDays = convertDays(days_string);
   const days = convertedDays.afterSelected;
   console.log(days);
   let day_html = '';
   for (let i = 0; i < days.length; i++) {
     let currentDay = '';
     if (i == 0) {
       currentDay = 'currentDay';
     }
     day_html += '<div class=" time-row ' + currentDay + ' " >'
     day_html += $('.hours-list').find('.' + days[i]).html();
     day_html += '</div>';
   }
   $('.hours-list').html(day_html);
   window.dayName = function (currentDate) {
     return days[currentDate.getDay()];
   };
   
   //Multi location data
   
</script>
<script>
   window.dayName = function (currentDate) {
     return days[currentDate.getDay()];
   };
   window.formatDate = function (intervalStamp, addDays) {
     let baseDate = new Date();
     let hours = intervalStamp / 100;
     let minutes = intervalStamp % 100;
     baseDate.setHours(hours);
     baseDate.setMinutes(minutes);
     const options = { hour: '2-digit', minute: '2-digit' };
     if (addDays != undefined) {
       options.weekday = "short";
       baseDate.setDate(baseDate.getDate() + addDays);
     }
     return baseDate.toLocaleTimeString([], options);
   };
   window.getYextTimeWithUtcOffset = function (entityUtcOffsetSeconds) {
     const now = new Date();
     let utcOffset = 0;
     if (entityUtcOffsetSeconds) {
       utcOffset = entityUtcOffsetSeconds * 1000;
     }
     if (utcOffset !== 0) {
       const localUtcOffset = now.getTimezoneOffset() * 60 * 1000;
       return new Date(now.valueOf() + utcOffset + localUtcOffset);
     }
     return now;
   };
   window.parseTimeZoneUtcOffset = function (timeString) {
     if (!timeString) {
       return 0;
     }
     const parts = timeString.split(":");
     const hours = parseInt(parts[0].replace(/\u200E/g, ''), 10);
     const minutes = parseInt(parts[1].replace(/\u200E/g, ''), 10);
     if (hours < 0) {
       return -(Math.abs(hours) + minutes / 60) * 60 * 60;
     }
     return (hours + minutes / 60) * 60 * 60;
   };
   window.dateStringToInt = function (dateString) {
     return parseInt(dateString.replace(":", ""))
   };
   window.getOpenNowString = function (hoursData, utcOffset) { 
     if (!hoursData) {
       return ""
     }
     const now = getYextTimeWithUtcOffset(utcOffset);
     const tomorrow = new Date(now.getTime() + 60 * 60 * 24 * 1000);
     const yesterday = new Date(now.getTime() - 60 * 60 * 24 * 1000);
     const nowTimeNumber = now.getHours() + now.getMinutes() / 60;
     function getIntervalOnDate(date) {
       const day = date.getDate();
       const month = date.getMonth() + 1;
       const year = date.getFullYear();
       const days = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
   
       const dateString = year + '-' + (month < 10 ? '0' + month : month) + '-' + (day < 10 ? '0' + day : day);
       const dayOfWeekString = days[date.getDay()];
       // Check for holiday
       if (hoursData.holidayHours) {
         for (let i = 0; i < hoursData.holidayHours.length; i++) {
           const holiday = hoursData.holidayHours[i];
           if (holiday.date == dateString) {
             if (holiday.openIntervals) {
               return holiday.openIntervals;
             } else if (holiday.isClosed === true) {
               return null; // On holiday but closed
             }
           }
         }
       }
       // Not on holiday
       if (hoursData[dayOfWeekString] && hoursData[dayOfWeekString].openIntervals) {
         return hoursData[dayOfWeekString].openIntervals;
       } else {
         return null;
       }
     }
     function timeStringToNumber(timeString) {
       const parts = timeString.split(":");
       const hours = parseInt(parts[0].replace(/\u200E/g, ''), 10);
       const minutes = parseInt(parts[1].replace(/\u200E/g, ''), 10);
       return hours + minutes / 60;
     }
     function formatTime(time) {
       const tempDate = new Date("January 1, 2020 " + time)
       const localeString = 'en-US';
       const tempTime = tempDate.toLocaleTimeString(localeString.replace('_', '-'), { hour: "numeric", minute: "numeric" });
       return tempTime;
     }
     const intervalsToday = getIntervalOnDate(now);
     const intervalsTomorrow = getIntervalOnDate(tomorrow);
     const intervalsYesterday = getIntervalOnDate(yesterday);
     let openRightNow = false;
     let currentInterval = null;
     let nextInterval = null;
     if (intervalsYesterday) {
       for (let i = 0; i < intervalsYesterday.length; i++) {
         const interval = intervalsYesterday[i];
         const startIntervalNumber = timeStringToNumber(interval.start);
         const endIntervalNumber = timeStringToNumber(interval.end);
         // If end overflows to the next day (i.e. today).
         if (endIntervalNumber < startIntervalNumber) {
           if (nowTimeNumber < endIntervalNumber) {
             currentInterval = interval;
             openRightNow = true;
           }
         }
       }
     }
     // Assumes no overlapping intervals
     if (intervalsToday) {
       for (let i = 0; i < intervalsToday.length; i++) {
         const interval = intervalsToday[i];
         const startIntervalNumber = timeStringToNumber(interval.start);
         const endIntervalNumber = timeStringToNumber(interval.end);
         // If current time doesn't belong to one of yesterdays interval.
         if (currentInterval == null) {
           if (endIntervalNumber < startIntervalNumber) {
             if (nowTimeNumber >= startIntervalNumber) {
               currentInterval = interval;
               openRightNow = true;
             }
           } else if (nowTimeNumber >= startIntervalNumber
             && nowTimeNumber < endIntervalNumber) {
             currentInterval = interval;
             openRightNow = true;
           }
         }
         if (nextInterval == null) {
           if (startIntervalNumber > nowTimeNumber) {
             nextInterval = interval
           }
         } else {
           if (startIntervalNumber > nowTimeNumber
             && startIntervalNumber < timeStringToNumber(nextInterval.start)) {
             nextInterval = interval;
           }
         }
       }
     }
     let nextIsTomorrow = false;
     // If no more intervals in the day
     if (nextInterval == null) {
       if (intervalsTomorrow) {
         if (intervalsTomorrow.length > 0) {
           nextInterval = intervalsTomorrow[0];
           nextIsTomorrow = true;
         }
       }
     }
   
   };
   
   var ourURL = window.location.href;
   var langauage = "";
   
   let parseerrors = "No Location Found";
   let getDirectionLabel = "Get Direction";
   let detailPageLabel = "Detailed Shop Sheet";
   
   if (ourURL.includes("/fr")) {
     langauage = "fr";
   parseerrors = "AUCUN emplacement trouvé"
   getDirectionLabel = "Obtenir l'itinéraire";
   detailPageLabel = " Fiche détaillée de la boutique";	
   }
   else if (ourURL.includes("/ja")) {
   langauage = "ja";
   parseerrors = "場所が見つかりません";
   getDirectionLabel = "方向性を得る";
   detailPageLabel = "詳細なショップシート";
   }
   else if (ourURL.includes("/en")) {
     langauage = "en";
   }
   
   
   document.addEventListener("DOMContentLoaded", function () {
     var baseURL = "https://liveapi-sandbox.yext.com/v2/accounts/me/entities?";
     var api_key = "{{global.liveApiKey}}";
     var vparam = "20181017";
     var lat = "{{latitude}}";
     var lng = "{{longitude}}";
     var location = lat + "," + lng;
     var limit = 3;
     var radius = 2500;
     var savedFilterId = "982931142";
     var entityTypes = "location";    
     var fields = "name,slug,hours,phoneticName,neighborhood,address,mainPhone,timeZoneUtcOffset,c_photoGallery2,emails";
     const savedSearchIdString = "";
   
     var fullURL =
       baseURL +
       "api_key=" +
       api_key +
       "&v=" +
       vparam +
       "&location=" +
       location +
       "&limit=" +
       (limit + 1) +
       "&radius=" +
       radius +
       "&entityTypes=" +
       entityTypes +
       "&languages=" +
       langauage +
       "&savedFilterIds=" +
       savedFilterId +
       "&fields=" +
   
       fields +
       "&resolvePlaceholders=true";
     [].slice
       .call(document.querySelectorAll(".location-data") || [])
       .forEach(function (el) {
         el.innerHTML = '<div class="col-span-2 text-center text-2xl mt-10 opacity-70 text-white">Loading...</div>';
       });
     //$.get(fullURL, function (data) {
     fetch(fullURL).then(response => response.json()).then(data => {
       //entities = data.response.entities;
       entities = data.response.entities;
       [].slice
         .call(document.querySelectorAll(".location-data") || [])
         .forEach(function (el) {
           el.innerHTML = "";
         });
       if (
         entities.length == 0 ||
         (entities.length == 1 && entities[0].meta.id == "{{id}}")
       ) {
         [].slice
           .call(document.querySelectorAll(".location-data") || [])
           .forEach(function (el) {          
   		el.innerHTML = '<div class="col-span-2 text-center text-2xl mt-10 opacity-70 text-white">' + parseerrors + '</div>';
           });
       }
       
       for (var i = 1; i < entities.length; i++) {
         location = entities[i];
         locationHTML = "";
         const parsedOffset = parseTimeZoneUtcOffset(location.timeZoneUtcOffset);
         
         //style="width:80%;height:auto;padding-top:2rem;padding-bottom:2rem;
         //style="width:100%;height:auto;        
         if (true) {
   
           	let address = '';
   	if(typeof location.address.line1 != undefined){
   		address += ucwords(location.address.line1);
   	}
   	
   	if(typeof location.address.city != undefined){
   		address += ', '+ucwords(location.address.city);
   	}
   	
   	if(typeof location.address.region != undefined){
   		address += ', '+ucwords(location.address.region);
   	}
   	
   	if(typeof location.address.postalCode != undefined){
   		address += ', '+ucwords(location.address.postalCode);
   	}
   	
   	if(typeof location.address.countryCode != undefined){
   		address += ', '+ucwords(location.address.countryCode);
   	}
   	
   	
   	
   	let html = '';	
   	html +=	'<div class="location">';
   	html +=	'<div class="center-column">';
   	html +=	'<h2 class="location-name"><a href="' + location.slug + '" class="storelocation-name details">';
   	html +=	'<p>' + ucwords(location.name) + '</p>';
   	html +=	'</a></h2>';
   	html +=	'<div class="shop-type"><!--<span class="miles">0.5 Miles</span>--><img src="/images/green_pin.png" alt=""></div>';
   	html +=	'<div class="result-content">';
   	html +=	'<div class="info-row address-info"><span class="icon font-chrisfo-icon">R</span>';
   	html +=	'<address class="info-row-content">' + address + '</address>';
   	html +=	'</div>';
    
    if(typeof location.mainPhone != undefined){
      html +=	'<div class="info-row"><span class="icon font-chrisfo-icon">Q</span>';			
      html +=	'<a class="info-row-content"href="tel:' + location.mainPhone + '">' + location.mainPhone + '</a></div>';
    }   
   	html +=	'<div class="info-row"><span class="icon font-chrisfo-icon">O</span>';
   	html +=	'<a href="mailto:'+location.emails+'" class="info-row-content">'+location.emails+'</a></div>';

    
    let currentStatus = "";
    if(typeof location.hours != undefined){
      let currentStatus = window.getOpenNowString(location.hours, parsedOffset);
    }

    if(currentStatus != ""){  
   	  html +=	'<div class="info-row currentStatus" data-id="main-shop-0"><span class="icon font-chrisfo-icon">0</span>';   
   	  html +=	'<span class="info-row-content">' + currentStatus + '</span>';
   	  html +=	'</div>';
     }

   	html +=	'</div>';
   	html +=	'<div class="location-action">';
   	html +=	'<a target="_blank" class="ghost-btn" href="https://www.google.com/maps/dir/?api=1&destination=' +address+ '">';
   	html +=	'<span class="icon font-chrisfo-icon">p</span> '+detailPageLabel+'</a>';
   	html +=	'<a class="ghost-btn" href="/en/domi-store.html"><span class="icon font-chrisfo-icon">b</span>'+getDirectionLabel+'</a>';
   	html +=	'</div>';
   	html +=	'</div>';
   	html +=	'</div>';
   	
   	        
           [].slice
             .call(document.querySelectorAll(".location-data") || [])
             .forEach(function (el) {
               el.innerHTML += html;
             });
         }
       }
     });
   
     function ucwords(title) {
       let str = title.toLowerCase();
       str = str.replace(/-/g, ' ');
       str = str.replace(/_/g, ' ');
       return str.replace(/(^([a-zA-Z\p{M}]))|([ -_][a-zA-Z\p{M}])/g, function (s) { return s.toUpperCase(); });
     }
   
     var entityId = '{{id}}';
   
     var entURL = "https://liveapi-sandbox.yext.com/v2/accounts/me/entities/" + entityId + '?';
   
     var fullURL =
       entURL +
       "api_key=" +
       api_key +
       "&v=" +
       vparam +
       "&limit=" +
       limit +
       "&entityTypes=" +
       entityTypes;
   
     fetch(fullURL).then(response => response.json()).then(result => {
       if (!result.errors) {
         var hours = result.response.hours;
         var parsedOffset = parseTimeZoneUtcOffset(result.response.timeZoneUtcOffset);
         var openingCloseTime = window.getOpenNowString(hours, parsedOffset);
         // $('.timeshow').html(openingCloseTime);      
         [].slice
           .call(document.querySelectorAll(".timeshow") || [])
           .forEach(function (el) {
             el.innerHTML = openingCloseTime;
           });
       } else {
   
       }
     });
   
   });
</script>